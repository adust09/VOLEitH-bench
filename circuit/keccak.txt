version 2.0.0;
circuit;
@type field 2;
@begin
  // 1. input: Receive 1600-bit initial state (25×64 bits) as private input
  $0 .. $24 <- @private_input(0);

  // 2. Execute 24 rounds of Keccak-f[1600]
  // Each round consists of the following 5 steps:
  //    (1) theta: Column parity calculation and state update
  //    (2) rho & pi: Bit rotation and position swapping of each word
  //    (3) chi: Non-linear transformation (bit operations for each row)
  //    (4) iota: Round constant injection
  //    (5) (Internal state update)
  //
  // In each round, the previous state ($0 .. $24) is used as input,
  // and the next state is obtained through subroutine calls.

  // --- Round 0 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC0>);

  // --- Round 1 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC1>);

  // --- Round 2 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_p极", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC2>);

  // --- Round 3 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC3>);

  // --- Round 4 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC4>);

  // --- Round 5 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC5>);

  // --- Round 6 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC6>);

  // --- Round 7 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC7>);

  // --- Round 8 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC8>);

  // --- Round 9 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24极 <RC9>);

  // --- Round 10 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC10>);

  // --- Round 11 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC11>);

  // --- Round 12 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC12>);

  // --- Round 13 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC13>);

  // --- Round 14 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC14>);

  // --- Round 15 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $极 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC15>);

  // --- Round 16 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC16>);

  // --- Round 17 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC17>);

  // --- Round 18 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC18>);

  // --- Round 19 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC19>);

  // --- Round 20 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC20>);

  // --- Round 21 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC21>);

  // --- Round 22 ---
  $0 .. $24 <- @call("keccak_theta", $0 .. $24);
  $0 .. $24 <- @call("keccak_rho_pi", $0 .. $24);
  $0 .. $24 <- @call("keccak_chi", $0 .. $24);
  $0 .. $24 <- @call("keccak_iota", $0 .. $24, <RC22>);

  // 3. Squeeze (output extraction): For SHA3-256, the first 256 bits of the state (e.g., words $0～$3) are used as output
  $25 .. $28 <- @copy($0 .. $3);
  $25 .. $28 -> @public_input;
@end
