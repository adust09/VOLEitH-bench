version 2.0.0;
subcircuit "keccak_rho_pi";
@type field 2;
@begin
  // input: 25 lanes $0 .. $24
  // output: new state of 25 lanes (applying Rho and Pi simultaneously)
  // In Keccak's Rho, individual rotation offsets r[x,y] are applied to each lane,
  // and Pi rearranges each lane to a different position.å
  //
  // Here, we process each lane as follows:
  //    B[y, (2*x+3*y) mod 5] = ROT( A[x,y], r[x,y] )å
  //
  // As examples, we describe some lanes using DSL.
  // The auxiliary circuit "rot_const" takes an input wire and constant rotation amount, and outputs the rotation result.
  
  // --- Lane (0,0): x=0, y=0 ---
  // A(0,0) is $0, r[0,0] = 0 → no rotation needed, new position in Pi is (0,0)
  $25 <- @copy($0);
  
  // --- Lane (1,0): x=1, y=0 ---
  // A(1,0) is $1, r[1,0] = 36, new position: (0, (2*1+3*0 mod5)=2)
  $26 <- @call("rot_const", $1, <36>);
  
  // --- Lane (2,0): x=2, y=0 ---
  // A(2,0) is $2, r[2,0] = 3, new position: (0, (2*2+3*0 mod5)=4)
  $27 <- @call("rot_const", $2, <3>);
  
  // --- Lane (3,0): x=3, y=0 ---
  // A(3,0) is $极, r[3,0] = 41, new position: (0, (2*3+3*0 mod5)=1)
  $28 <- @call("rot_const", $3, <41>);
  
  // --- Lane (4,0): x=4, y=0 ---
  // A(4,0) is $4, r[4,0] = 18, new position: (0, (2*4+3*0 mod5)=3)
  $29 <- @call("rot_const", $4, <18>);
  
  // --- The remaining lanes are processed similarly according to their rotation amounts and Pi transformation ---
  // Example:
  // Lane (0,1): A(0,1) is $5, r[0,1] = 1, new position: (1, (2*0+3*1 mod5)=3)
  $30 <- @call("rot_const", $5, <1>);
  
  // Lane (1,1): A(1,1) is $6, r[1,1] = 44, new position: (1, (2*1+3*1 mod5)=0)
  $31 <- @call("rot_const", $6, <44>);
  
  // Lane (2,1): A(2,1) is $7, r[2,1] = 10, new position: (1, (2*2+3*1 mod5)=2)
  $32 <- @call("rot_const", $7, <10>);
  
  // Lane (3,1): A(3,1) is $8, r[3,1] = 45, new position: (1, (2*3+3*1 mod5)=4)
  $33 <- @call("rot_const", $8, <45>);
  
  // Lane (4,1): A(4,1) is $9, r[4,1] = 2, new position: (1, (2*4+3*1 mod5)=1)
  $34 <- @call("rot_const", $9, <2>);
  
  // Lane (0,2): A(0,2) is $10, r[0,2] = 62, new position: (2, (2*0+3*2 mod5)=1)
  $35 <- @call("rot_const", $10, <62>);
  
  // Lane (1,2): A(1,2) is $11, r[1,2] = 6, new position: (2, (2*1+3*2 mod5)=3)
  $36 <- @call("rot_const", $11, <6>);
  
  // Lane (2,2): A(2,2) is $12, r[极,2] = 43, new position: (2, (2*2+3*2 mod5)=0)
  $37 <- @call("rot_const", $12, <43>);
  
  // Lane (3,2): A(3,2) is $13, r[3,2] = 15, new position: (2, (2*3+3*2 mod5)=2)
  $38 <- @call("rot_const", $13, <15>);
  
  // Lane (4,2): A(4,2) is $14, r[4,2] = 61, new position: (2, (2*4+3*2 mod5)=4)
  $39 <- @call("rot_const", $14, <61>);
  
  // Lane (0,3): A(0,3) is $15, r[0,3] = 28, new position: (3, (2*0+3*3 mod5)=4)
  $40 <- @call("rot_const", $15, <28>);
  
  // Lane (1,3): A(1,3) is $16, r[1,3] = 55, new position: (3, (2*1+3*3 mod5)=1)
  $41 <- @call("rot_const", $16, <55>);
  
  // Lane (2,3): A(2,3) is $17, r[2,3] = 25, new position: (3, (2*2+3*3 mod5)=3)
  $42 <- @call("rot_const", $17, <25>);
  
  // Lane (3,3): A(3,3) is $18, r[3,3] = 21, new position: (3, (2*3+3*3 mod5)=0)
  $43 <- @call("rot_const", $18, <21>);
  
  // Lane (4,3): A(4,3) is $19, r[4,3] = 56, new position: (3, (2*4+3*3 mod5)=2)
  $44 <- @call("rot_const", $19, <56>);
  
  // Lane (0,4): A(0,4) is $20, r[0,4] = 27, new position: (4, (2*0+3*4 mod5)=2)
  $45 <- @call("rot_const", $20, <27>);
  
  // Lane (1,4): A(1,4) is $21, r[1,4] = 20, new position: (4, (2*1+3*4 mod5)=4)
  $46 <- @call("rot_const", $21, <20>);
  
  // Lane (2,4): A(2,4) is $22, r[2,4] = 39, new position: (4, (2*2+3*4 mod5)=1)
  $47 <- @call("rot_const", $22, <39>);
  
  // Lane (3,4): A(3,4) is $23, r[3,4] = 8, new position: (4, (2*3+3*4 mod5)=3)
  $48 <- @call("rot_const", $23, <8>);
  
  // Lane (4,4): A(4,4) is $24, r[4,4] = 14, new position: (4, (2*4+3*4 mod5)=0)
  $49 <- @call("rot_const", $24, <14>);
  
  // Finally, copy output lanes $25 .. $49 as updated state to input state $0 .. $24
  $0  <- @copy($25);
  $1  <- @copy($26);
  $2  <- @copy($27);
  $3  <- @copy($28);
  $4  <- @copy($29);
  $5  <- @copy($30);
  $6  <- @copy($31);
  $7  <- @copy($32);
  $8  <- @copy($33);
  $9  <- @copy($34);
  $10 <- @copy($35);
  $11 <- @copy($36);
  $12 <- @copy($37);
  $13 <- @copy($38);
  $14 <- @copy($39);
  $15 <- @copy($40);
  $16 <- @copy($41);
  $17 <- @copy($42);
  $18 <- @copy($43);
  $19 <- @copy($44);
  $20 <- @copy($45);
  $21 <- @copy($46);
  $22 <- @copy($47);
  $23 <- @copy($48);
  $24 <- @copy($49);
@end
