version 2.0.0;
circuit;
@type field 18446744073709551616;
@begin
    // **** HASH ITERATION 1 ****
    // Private inputs: 3 input elements
    $0 <- @private(0);  // Input 1
    $1 <- @private(0);  // Input 2
    $2 <- @private(0);  // Input 3
    
    // Initialize state with input elements using @add with zero
    // State size: 3 elements (t=3)
    $3 <- @private(0);  // Zero value
    $6 <- @add(0: $0, $3);  // Add zero to copy input
    $7 <- @add(0: $1, $3);  // Add zero to copy input
    $8 <- @add(0: $2, $3);  // Add zero to copy input
    
    // Round constants for the first round
    $9 <- @private(0);  // Round constant 0
    $10 <- @private(0);  // Round constant 1
    $11 <- @private(0);  // Round constant 2
    
    // Add round constants (ARK - Add Round Key)
    $12 <- @add(0: $6, $9);
    $13 <- @add(0: $7, $10);
    $14 <- @add(0: $8, $11);
    
    // ===== FULL ROUNDS (first set) =====
    // Typically Poseidon uses 4 full rounds at the beginning
    
    // Full Round 1
    // S-box layer (x^5 in Fp)
    $15 <- @mul(0: $12, $12);     // x^2
    $16 <- @mul(0: $15, $15);   // x^4
    $17 <- @mul(0: $16, $12);    // x^5 for first state element
    
    $18 <- @mul(0: $13, $13);   // x^2
    $19 <- @mul(0: $18, $18);   // x^4
    $20 <- @mul(0: $19, $13);   // x^5 for second state element
    
    $21 <- @mul(0: $14, $14);   // x^2
    $22 <- @mul(0: $21, $21);   // x^4
    $23 <- @mul(0: $22, $14);   // x^5 for third state element
    
    // MDS matrix multiplication (linear layer)
    // Using a simple MDS matrix for demonstration
    // [ 2 3 1 ]
    // [ 1 2 3 ]
    // [ 3 1 2 ]
    
    // Coefficients for MDS matrix
    $24 <- @private(0);  // Coefficient 2
    $25 <- @private(0);  // Coefficient 3
    
    // First row: 2*s0 + 3*s1 + 1*s2
    $26 <- @mul(0: $17, $24);  // 2*s0
    $27 <- @mul(0: $20, $25);  // 3*s1
    $28 <- @add(0: $26, $27);          // 2*s0 + 3*s1
    $29 <- @add(0: $28, $23);          // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $30 <- @mul(0: $20, $24);  // 2*s1
    $31 <- @mul(0: $23, $25);  // 3*s2
    $32 <- @add(0: $17, $30);          // s0 + 2*s1
    $33 <- @add(0: $32, $31);          // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $34 <- @mul(0: $17, $25);  // 3*s0
    $35 <- @mul(0: $23, $24);  // 2*s2
    $36 <- @add(0: $34, $20);          // 3*s0 + s1
    $37 <- @add(0: $36, $35);          // 3*s0 + s1 + 2*s2
    
    // Round constants for the next round
    $38 <- @private(0);  // Round constant 3
    $39 <- @private(0);  // Round constant 4
    $40 <- @private(0);  // Round constant 5
    
    // Add round constants
    $41 <- @add(0: $29, $38);
    $42 <- @add(0: $33, $39);
    $43 <- @add(0: $37, $40);
    
    // Full Round 2
    // S-box layer (x^5 in Fp)
    $44 <- @mul(0: $41, $41);    // x^2
    $45 <- @mul(0: $44, $44);    // x^4
    $46 <- @mul(0: $45, $41);    // x^5 for first state element
    
    $47 <- @mul(0: $42, $42);    // x^2
    $48 <- @mul(0: $47, $47);    // x^4
    $49 <- @mul(0: $48, $42);    // x^5 for second state element
    
    $50 <- @mul(0: $43, $43);    // x^2
    $51 <- @mul(0: $50, $50);    // x^4
    $52 <- @mul(0: $51, $43);    // x^5 for third state element
    
    // MDS matrix multiplication (same as before)
    // First row: 2*s0 + 3*s1 + 1*s2
    $53 <- @mul(0: $46, $24);  // 2*s0
    $54 <- @mul(0: $49, $25);  // 3*s1
    $55 <- @add(0: $53, $54);          // 2*s0 + 3*s1
    $56 <- @add(0: $55, $52);          // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $57 <- @mul(0: $49, $24);  // 2*s1
    $58 <- @mul(0: $52, $25);  // 3*s2
    $59 <- @add(0: $46, $57);          // s0 + 2*s1
    $60 <- @add(0: $59, $58);          // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $61 <- @mul(0: $46, $25);  // 3*s0
    $62 <- @mul(0: $52, $24);  // 2*s2
    $63 <- @add(0: $61, $49);          // 3*s0 + s1
    $64 <- @add(0: $63, $62);          // 3*s0 + s1 + 2*s2
    
    // Round constants for the next round
    $65 <- @private(0);  // Round constant 6
    $66 <- @private(0);  // Round constant 7
    $67 <- @private(0);  // Round constant 8
    
    // Add round constants
    $68 <- @add(0: $56, $65);
    $69 <- @add(0: $60, $66);
    $70 <- @add(0: $64, $67);
    
    // Full Round 3
    // S-box layer (x^5 in Fp)
    $71 <- @mul(0: $68, $68);    // x^2
    $72 <- @mul(0: $71, $71);    // x^4
    $73 <- @mul(0: $72, $68);    // x^5 for first state element
    
    $74 <- @mul(0: $69, $69);    // x^2
    $75 <- @mul(0: $74, $74);    // x^4
    $76 <- @mul(0: $75, $69);    // x^5 for second state element
    
    $77 <- @mul(0: $70, $70);    // x^2
    $78 <- @mul(0: $77, $77);    // x^4
    $79 <- @mul(0: $78, $70);    // x^5 for third state element
    
    // MDS matrix multiplication (same as before)
    // First row: 2*s0 + 3*s1 + 1*s2
    $80 <- @mul(0: $73, $24);  // 2*s0
    $81 <- @mul(0: $76, $25);  // 3*s1
    $82 <- @add(0: $80, $81);          // 2*s0 + 3*s1
    $83 <- @add(0: $82, $79);          // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $84 <- @mul(0: $76, $24);  // 2*s1
    $85 <- @mul(0: $79, $25);  // 3*s2
    $86 <- @add(0: $73, $84);          // s0 + 2*s1
    $87 <- @add(0: $86, $85);          // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $88 <- @mul(0: $73, $25);  // 3*s0
    $89 <- @mul(0: $79, $24);  // 2*s2
    $90 <- @add(0: $88, $76);          // 3*s0 + s1
    $91 <- @add(0: $90, $89);          // 3*s0 + s1 + 2*s2
    
    // Round constants for the next round
    $92 <- @private(0);  // Round constant 9
    $93 <- @private(0);  // Round constant 10
    $94 <- @private(0);  // Round constant 11
    
    // Add round constants
    $95 <- @add(0: $83, $92);
    $96 <- @add(0: $87, $93);
    $97 <- @add(0: $91, $94);
    
    // Full Round 4
    // S-box layer (x^5 in Fp)
    $98 <- @mul(0: $95, $95);    // x^2
    $99 <- @mul(0: $98, $98);    // x^4
    $100 <- @mul(0: $99, $95);    // x^5 for first state element
    
    $101 <- @mul(0: $96, $96);    // x^2
    $102 <- @mul(0: $101, $101);    // x^4
    $103 <- @mul(0: $102, $96);    // x^5 for second state element
    
    $104 <- @mul(0: $97, $97);    // x^2
    $105 <- @mul(0: $104, $104);   // x^4
    $106 <- @mul(0: $105, $97);  // x^5 for third state element
    
    // MDS matrix multiplication (same as before)
    // First row: 2*s0 + 3*s1 + 1*s2
    $107 <- @mul(0: $100, $24);   // 2*s0
    $108 <- @mul(0: $103, $25);   // 3*s1
    $109 <- @add(0: $107, $108);         // 2*s0 + 3*s1
    $110 <- @add(0: $109, $106);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $111 <- @mul(0: $103, $24);   // 2*s1
    $112 <- @mul(0: $106, $25);  // 3*s2
    $113 <- @add(0: $100, $111);          // s0 + 2*s1
    $114 <- @add(0: $113, $112);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $115 <- @mul(0: $100, $25);   // 3*s0
    $116 <- @mul(0: $106, $24);  // 2*s2
    $117 <- @add(0: $115, $103);          // 3*s0 + s1
    $118 <- @add(0: $117, $116);         // 3*s0 + s1 + 2*s2
    
    // Round constants for the partial rounds
    $119 <- @private(0);  // Round constant 12
    $120 <- @private(0);  // Round constant 13
    $121 <- @private(0);  // Round constant 14
    
    // Add round constants
    $122 <- @add(0: $110, $119);
    $123 <- @add(0: $114, $120);
    $124 <- @add(0: $118, $121);
    
    // ===== PARTIAL ROUNDS =====
    // Typically Poseidon uses around 30 partial rounds for t=3
    // We'll implement a few for demonstration
    
    // Partial Round 1
    // S-box layer (x^5) applied only to the first element
    $125 <- @mul(0: $122, $122);   // x^2
    $126 <- @mul(0: $125, $125);   // x^4
    $127 <- @mul(0: $126, $122);   // x^5 for first state element only
    
    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $128 <- @mul(0: $127, $24);  // 2*s0
    $129 <- @mul(0: $123, $25);  // 3*s1
    $130 <- @add(0: $128, $129);         // 2*s0 + 3*s1
    $131 <- @add(0: $130, $124);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $132 <- @mul(0: $123, $24);  // 2*s1
    $133 <- @mul(0: $124, $25);  // 3*s2
    $134 <- @add(0: $127, $132);         // s0 + 2*s1
    $135 <- @add(0: $134, $133);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $136 <- @mul(0: $127, $25);  // 3*s0
    $137 <- @mul(0: $124, $24);  // 2*s2
    $138 <- @add(0: $136, $123);         // 3*s0 + s1
    $139 <- @add(0: $138, $137);         // 3*s0 + s1 + 2*s2
    
    // Round constants for the next round
    $140 <- @private(0);  // Round constant 15
    $141 <- @private(0);  // Round constant 16
    $142 <- @private(0);  // Round constant 17
    
    // Add round constants
    $143 <- @add(0: $131, $140);
    $144 <- @add(0: $135, $141);
    $145 <- @add(0: $139, $142);
    
    // Partial Round 2
    // S-box layer (x^5) applied only to the first element
    $146 <- @mul(0: $143, $143);   // x^2
    $147 <- @mul(0: $146, $146);   // x^4
    $148 <- @mul(0: $147, $143);   // x^5 for first state element only
    
    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $149 <- @mul(0: $148, $24);  // 2*s0
    $150 <- @mul(0: $144, $25);  // 3*s1
    $151 <- @add(0: $149, $150);         // 2*s0 + 3*s1
    $152 <- @add(0: $151, $145);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $153 <- @mul(0: $144, $24);  // 2*s1
    $154 <- @mul(0: $145, $25);  // 3*s2
    $155 <- @add(0: $148, $153);         // s0 + 2*s1
    $156 <- @add(0: $155, $154);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $157 <- @mul(0: $148, $25);  // 3*s0
    $158 <- @mul(0: $145, $24);  // 2*s2
    $159 <- @add(0: $157, $144);         // 3*s0 + s1
    $160 <- @add(0: $159, $158);         // 3*s0 + s1 + 2*s2
    
    // Round constants for the next round
    $161 <- @private(0);  // Round constant 18
    $162 <- @private(0);  // Round constant 19
    $163 <- @private(0);  // Round constant 20
    
    // Add round constants
    $164 <- @add(0: $152, $161);
    $165 <- @add(0: $156, $162);
    $166 <- @add(0: $160, $163);
    
    // ===== FULL ROUNDS (final set) =====
    // Typically Poseidon uses 4 full rounds at the end
    
    // Full Round 1 (of final set)
    // S-box layer (x^5 in Fp)
    $167 <- @mul(0: $164, $164);   // x^2
    $168 <- @mul(0: $167, $167);   // x^4
    $169 <- @mul(0: $168, $164);   // x^5 for first state element
    
    $170 <- @mul(0: $165, $165);   // x^2
    $171 <- @mul(0: $170, $170);   // x^4
    $172 <- @mul(0: $171, $165);   // x^5 for second state element
    
    $173 <- @mul(0: $166, $166);   // x^2
    $174 <- @mul(0: $173, $173);   // x^4
    $175 <- @mul(0: $174, $166);   // x^5 for third state element
    
    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $176 <- @mul(0: $169, $24);  // 2*s0
    $177 <- @mul(0: $172, $25);  // 3*s1
    $178 <- @add(0: $176, $177);         // 2*s0 + 3*s1
    $179 <- @add(0: $178, $175);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $180 <- @mul(0: $172, $24);  // 2*s1
    $181 <- @mul(0: $175, $25);  // 3*s2
    $182 <- @add(0: $169, $180);         // s0 + 2*s1
    $183 <- @add(0: $182, $181);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $184 <- @mul(0: $169, $25);  // 3*s0
    $185 <- @mul(0: $175, $24);  // 2*s2
    $186 <- @add(0: $184, $172);         // 3*s0 + s1
    $187 <- @add(0: $186, $185);         // 3*s0 + s1 + 2*s2
    
    // Round constants for the next round
    $188 <- @private(0);  // Round constant 21
    $189 <- @private(0);  // Round constant 22
    $190 <- @private(0);  // Round constant 23
    
    // Add round constants
    $191 <- @add(0: $179, $188);
    $192 <- @add(0: $183, $189);
    $193 <- @add(0: $187, $190);
    
    // Full Round 2 (of final set)
    // S-box layer (x^5 in Fp)
    $194 <- @mul(0: $191, $191);   // x^2
    $195 <- @mul(0: $194, $194);   // x^4
    $196 <- @mul(0: $195, $191);   // x^5 for first state element
    
    $197 <- @mul(0: $192, $192);   // x^2
    $198 <- @mul(0: $197, $197);   // x^4
    $199 <- @mul(0: $198, $192);   // x^5 for second state element
    
    $200 <- @mul(0: $193, $193);   // x^2
    $201 <- @mul(0: $200, $200);   // x^4
    $202 <- @mul(0: $201, $193);   // x^5 for third state element
    
    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $203 <- @mul(0: $196, $24);  // 2*s0
    $204 <- @mul(0: $199, $25);  // 3*s1
    $205 <- @add(0: $203, $204);         // 2*s0 + 3*s1
    $206 <- @add(0: $205, $202);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $207 <- @mul(0: $199, $24);  // 2*s1
    $208 <- @mul(0: $202, $25);  // 3*s2
    $209 <- @add(0: $196, $207);         // s0 + 2*s1
    $210 <- @add(0: $209, $208);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $211 <- @mul(0: $196, $25);  // 3*s0
    $212 <- @mul(0: $202, $24);  // 2*s2
    $213 <- @add(0: $211, $199);         // 3*s0 + s1
    $214 <- @add(0: $213, $212);         // 3*s0 + s1 + 2*s2

    // First hash output (keep all three state elements)
    $215 <- @add(0: $206, $3);  // First element - Add zero to copy
    $216 <- @add(0: $210, $3);  // Second element - Add zero to copy
    $217 <- @add(0: $214, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 2 ****
    // Use output from first hash as input to second hash
    // Initialize state with the previous hash output
    $218 <- @private(0);  // Zero for chaining
    $219 <- @add(0: $215, $218);  // First element from first hash
    $220 <- @add(0: $216, $218);  // Second element from first hash
    $221 <- @add(0: $217, $218);  // Third element from first hash

    // Round constants for the second hash
    $222 <- @private(0);  // Round constant 0
    $223 <- @private(0);  // Round constant 1
    $224 <- @private(0);  // Round constant 2
    
    // Add round constants
    $225 <- @add(0: $219, $222);
    $226 <- @add(0: $220, $223);
    $227 <- @add(0: $221, $224);
    
    // Full Round 1 of second hash
    // S-box layer (x^5 in Fp)
    $228 <- @mul(0: $225, $225);  // x^2
    $229 <- @mul(0: $228, $228);  // x^4
    $230 <- @mul(0: $229, $225);  // x^5 for first element
    
    $231 <- @mul(0: $226, $226);  // x^2
    $232 <- @mul(0: $231, $231);  // x^4
    $233 <- @mul(0: $232, $226);  // x^5 for second element
    
    $234 <- @mul(0: $227, $227);  // x^2
    $235 <- @mul(0: $234, $234);  // x^4
    $236 <- @mul(0: $235, $227);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $237 <- @mul(0: $230, $24);  // 2*s0
    $238 <- @mul(0: $233, $25);  // 3*s1
    $239 <- @add(0: $237, $238);         // 2*s0 + 3*s1
    $240 <- @add(0: $239, $236);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $241 <- @mul(0: $233, $24);  // 2*s1
    $242 <- @mul(0: $236, $25);  // 3*s2
    $243 <- @add(0: $230, $241);         // s0 + 2*s1
    $244 <- @add(0: $243, $242);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $245 <- @mul(0: $230, $25);  // 3*s0
    $246 <- @mul(0: $236, $24);  // 2*s2
    $247 <- @add(0: $245, $233);         // 3*s0 + s1
    $248 <- @add(0: $247, $246);         // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $249 <- @private(0);  // Round constant 3
    $250 <- @private(0);  // Round constant 4
    $251 <- @private(0);  // Round constant 5
    
    // Add round constants
    $252 <- @add(0: $240, $249);
    $253 <- @add(0: $244, $250);
    $254 <- @add(0: $248, $251);

    // Continue with more rounds of second hash...
    // For brevity, we'll skip to the output of the second hash
    // In a real implementation, you would include all rounds

    // Simulated output of the second hash (normally would be many more operations)
    $255 <- @mul(0: $252, $252);  // x^2
    $256 <- @mul(0: $255, $255);  // x^4
    $257 <- @mul(0: $256, $252);  // x^5

    $258 <- @mul(0: $253, $253);  // x^2
    $259 <- @mul(0: $258, $258);  // x^4
    $260 <- @mul(0: $259, $253);  // x^5

    $261 <- @mul(0: $254, $254);  // x^2
    $262 <- @mul(0: $261, $261);  // x^4
    $263 <- @mul(0: $262, $254);  // x^5

    // Second hash output (all three state elements)
    $264 <- @add(0: $257, $3);  // First element - Add zero to copy
    $265 <- @add(0: $260, $3);  // Second element - Add zero to copy
    $266 <- @add(0: $263, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 3 ****
    // Use output from second hash as input to third hash
    $267 <- @private(0);  // Zero for chaining
    $268 <- @add(0: $264, $267);  // First element from second hash
    $269 <- @add(0: $265, $267);  // Second element from second hash
    $270 <- @add(0: $266, $267);  // Third element from second hash

    // Round constants for the third hash
    $271 <- @private(0);  // Round constant 0
    $272 <- @private(0);  // Round constant 1
    $273 <- @private(0);  // Round constant 2
    
    // Add round constants
    $274 <- @add(0: $268, $271);
    $275 <- @add(0: $269, $272);
    $276 <- @add(0: $270, $273);
    
    // Full Round 1 of third hash
    // S-box layer (x^5 in Fp)
    $277 <- @mul(0: $274, $274);  // x^2
    $278 <- @mul(0: $277, $277);  // x^4
    $279 <- @mul(0: $278, $274);  // x^5 for first element
    
    $280 <- @mul(0: $275, $275);  // x^2
    $281 <- @mul(0: $280, $280);  // x^4
    $282 <- @mul(0: $281, $275);  // x^5 for second element
    
    $283 <- @mul(0: $276, $276);  // x^2
    $284 <- @mul(0: $283, $283);  // x^4
    $285 <- @mul(0: $284, $276);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $286 <- @mul(0: $279, $24);  // 2*s0
    $287 <- @mul(0: $282, $25);  // 3*s1
    $288 <- @add(0: $286, $287);         // 2*s0 + 3*s1
    $289 <- @add(0: $288, $285);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $290 <- @mul(0: $282, $24);  // 2*s1
    $291 <- @mul(0: $285, $25);  // 3*s2
    $292 <- @add(0: $279, $290);         // s0 + 2*s1
    $293 <- @add(0: $292, $291);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $294 <- @mul(0: $279, $25);  // 3*s0
    $295 <- @mul(0: $285, $24);  // 2*s2
    $296 <- @add(0: $294, $282);         // 3*s0 + s1
    $297 <- @add(0: $296, $295);         // 3*s0 + s1 + 2*s2

    // Simulated output of the third hash (normally would be many more operations)
    $298 <- @mul(0: $289, $289);  // x^2
    $299 <- @mul(0: $298, $298);  // x^4
    $300 <- @mul(0: $299, $289);  // x^5

    $301 <- @mul(0: $293, $293);  // x^2
    $302 <- @mul(0: $301, $301);  // x^4
    $303 <- @mul(0: $302, $293);  // x^5

    $304 <- @mul(0: $297, $297);  // x^2
    $305 <- @mul(0: $304, $304);  // x^4
    $306 <- @mul(0: $305, $297);  // x^5

    // Third hash output (all three state elements)
    $307 <- @add(0: $300, $3);  // First element - Add zero to copy
    $308 <- @add(0: $303, $3);  // Second element - Add zero to copy
    $309 <- @add(0: $306, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 4 ****
    // Use output from third hash as input to fourth hash
    $310 <- @private(0);  // Zero for chaining
    $311 <- @add(0: $307, $310);  // First element from third hash
    $312 <- @add(0: $308, $310);  // Second element from third hash
    $313 <- @add(0: $309, $310);  // Third element from third hash

    // Round constants for the fourth hash
    $314 <- @private(0);  // Round constant 0
    $315 <- @private(0);  // Round constant 1
    $316 <- @private(0);  // Round constant 2
    
    // Add round constants
    $317 <- @add(0: $311, $314);
    $318 <- @add(0: $312, $315);
    $319 <- @add(0: $313, $316);
    
    // Full Round 1 of fourth hash
    // S-box layer (x^5 in Fp)
    $320 <- @mul(0: $317, $317);  // x^2
    $321 <- @mul(0: $320, $320);  // x^4
    $322 <- @mul(0: $321, $317);  // x^5 for first element
    
    $323 <- @mul(0: $318, $318);  // x^2
    $324 <- @mul(0: $323, $323);  // x^4
    $325 <- @mul(0: $324, $318);  // x^5 for second element
    
    $326 <- @mul(0: $319, $319);  // x^2
    $327 <- @mul(0: $326, $326);  // x^4
    $328 <- @mul(0: $327, $319);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $329 <- @mul(0: $322, $24);  // 2*s0
    $330 <- @mul(0: $325, $25);  // 3*s1
    $331 <- @add(0: $329, $330);         // 2*s0 + 3*s1
    $332 <- @add(0: $331, $328);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $333 <- @mul(0: $325, $24);  // 2*s1
    $334 <- @mul(0: $328, $25);  // 3*s2
    $335 <- @add(0: $322, $333);         // s0 + 2*s1
    $336 <- @add(0: $335, $334);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $337 <- @mul(0: $322, $25);  // 3*s0
    $338 <- @mul(0: $328, $24);  // 2*s2
    $339 <- @add(0: $337, $325);         // 3*s0 + s1
    $340 <- @add(0: $339, $338);         // 3*s0 + s1 + 2*s2

    // Simulated output of the fourth hash (normally would be many more operations)
    $341 <- @mul(0: $332, $332);  // x^2
    $342 <- @mul(0: $341, $341);  // x^4
    $343 <- @mul(0: $342, $332);  // x^5

    $344 <- @mul(0: $336, $336);  // x^2
    $345 <- @mul(0: $344, $344);  // x^4
    $346 <- @mul(0: $345, $336);  // x^5

    $347 <- @mul(0: $340, $340);  // x^2
    $348 <- @mul(0: $347, $347);  // x^4
    $349 <- @mul(0: $348, $340);  // x^5

    // Fourth hash output (all three state elements)
    $350 <- @add(0: $343, $3);  // First element - Add zero to copy
    $351 <- @add(0: $346, $3);  // Second element - Add zero to copy
    $352 <- @add(0: $349, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 5 ****
    // Use output from fourth hash as input to fifth hash
    $353 <- @private(0);  // Zero for chaining
    $354 <- @add(0: $350, $353);  // First element from fourth hash
    $355 <- @add(0: $351, $353);  // Second element from fourth hash
    $356 <- @add(0: $352, $353);  // Third element from fourth hash

    // Round constants for the fifth hash
    $357 <- @private(0);  // Round constant 0
    $358 <- @private(0);  // Round constant 1
    $359 <- @private(0);  // Round constant 2
    
    // Add round constants
    $360 <- @add(0: $354, $357);
    $361 <- @add(0: $355, $358);
    $362 <- @add(0: $356, $359);
    
    // Full Round 1 of fifth hash
    // S-box layer (x^5 in Fp)
    $363 <- @mul(0: $360, $360);  // x^2
    $364 <- @mul(0: $363, $363);  // x^4
    $365 <- @mul(0: $364, $360);  // x^5 for first element
    
    $366 <- @mul(0: $361, $361);  // x^2
    $367 <- @mul(0: $366, $366);  // x^4
    $368 <- @mul(0: $367, $361);  // x^5 for second element
    
    $369 <- @mul(0: $362, $362);  // x^2
    $370 <- @mul(0: $369, $369);  // x^4
    $371 <- @mul(0: $370, $362);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $372 <- @mul(0: $365, $24);  // 2*s0
    $373 <- @mul(0: $368, $25);  // 3*s1
    $374 <- @add(0: $372, $373);         // 2*s0 + 3*s1
    $375 <- @add(0: $374, $371);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $376 <- @mul(0: $368, $24);  // 2*s1
    $377 <- @mul(0: $371, $25);  // 3*s2
    $378 <- @add(0: $365, $376);         // s0 + 2*s1
    $379 <- @add(0: $378, $377);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $380 <- @mul(0: $365, $25);  // 3*s0
    $381 <- @mul(0: $371, $24);  // 2*s2
    $382 <- @add(0: $380, $368);         // 3*s0 + s1
    $383 <- @add(0: $382, $381);         // 3*s0 + s1 + 2*s2

    // Simulated output of the fifth hash (normally would be many more operations)
    $384 <- @mul(0: $375, $375);  // x^2
    $385 <- @mul(0: $384, $384);  // x^4
    $386 <- @mul(0: $385, $375);  // x^5

    $387 <- @mul(0: $379, $379);  // x^2
    $388 <- @mul(0: $387, $387);  // x^4
    $389 <- @mul(0: $388, $379);  // x^5

    $390 <- @mul(0: $383, $383);  // x^2
    $391 <- @mul(0: $390, $390);  // x^4
    $392 <- @mul(0: $391, $383);  // x^5

    // Fifth hash output (all three state elements)
    $393 <- @add(0: $386, $3);  // First element - Add zero to copy
    $394 <- @add(0: $389, $3);  // Second element - Add zero to copy
    $395 <- @add(0: $392, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 6 ****
    // Use output from fifth hash as input to sixth hash
    $396 <- @private(0);  // Zero for chaining
    $397 <- @add(0: $393, $396);  // First element from fifth hash
    $398 <- @add(0: $394, $396);  // Second element from fifth hash
    $399 <- @add(0: $395, $396);  // Third element from fifth hash

    // Round constants for the sixth hash
    $400 <- @private(0);  // Round constant 0
    $401 <- @private(0);  // Round constant 1
    $402 <- @private(0);  // Round constant 2
    
    // Add round constants
    $403 <- @add(0: $397, $400);
    $404 <- @add(0: $398, $401);
    $405 <- @add(0: $399, $402);
    
    // Full Round 1 of sixth hash
    // S-box layer (x^5 in Fp)
    $406 <- @mul(0: $403, $403);  // x^2
    $407 <- @mul(0: $406, $406);  // x^4
    $408 <- @mul(0: $407, $403);  // x^5 for first element
    
    $409 <- @mul(0: $404, $404);  // x^2
    $410 <- @mul(0: $409, $409);  // x^4
    $411 <- @mul(0: $410, $404);  // x^5 for second element
    
    $412 <- @mul(0: $405, $405);  // x^2
    $413 <- @mul(0: $412, $412);  // x^4
    $414 <- @mul(0: $413, $405);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $415 <- @mul(0: $408, $24);  // 2*s0
    $416 <- @mul(0: $411, $25);  // 3*s1
    $417 <- @add(0: $415, $416);         // 2*s0 + 3*s1
    $418 <- @add(0: $417, $414);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $419 <- @mul(0: $411, $24);  // 2*s1
    $420 <- @mul(0: $414, $25);  // 3*s2
    $421 <- @add(0: $408, $419);         // s0 + 2*s1
    $422 <- @add(0: $421, $420);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $423 <- @mul(0: $408, $25);  // 3*s0
    $424 <- @mul(0: $414, $24);  // 2*s2
    $425 <- @add(0: $423, $411);         // 3*s0 + s1
    $426 <- @add(0: $425, $424);         // 3*s0 + s1 + 2*s2

    // Simulated output of the sixth hash (normally would be many more operations)
    $427 <- @mul(0: $418, $418);  // x^2
    $428 <- @mul(0: $427, $427);  // x^4
    $429 <- @mul(0: $428, $418);  // x^5

    $430 <- @mul(0: $422, $422);  // x^2
    $431 <- @mul(0: $430, $430);  // x^4
    $432 <- @mul(0: $431, $422);  // x^5

    $433 <- @mul(0: $426, $426);  // x^2
    $434 <- @mul(0: $433, $433);  // x^4
    $435 <- @mul(0: $434, $426);  // x^5

    // Sixth hash output (all three state elements)
    $436 <- @add(0: $429, $3);  // First element - Add zero to copy
    $437 <- @add(0: $432, $3);  // Second element - Add zero to copy
    $438 <- @add(0: $435, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 7 ****
    // Use output from sixth hash as input to seventh hash
    $439 <- @private(0);  // Zero for chaining
    $440 <- @add(0: $436, $439);  // First element from sixth hash
    $441 <- @add(0: $437, $439);  // Second element from sixth hash
    $442 <- @add(0: $438, $439);  // Third element from sixth hash

    // Round constants for the seventh hash
    $443 <- @private(0);  // Round constant 0
    $444 <- @private(0);  // Round constant 1
    $445 <- @private(0);  // Round constant 2
    
    // Add round constants
    $446 <- @add(0: $440, $443);
    $447 <- @add(0: $441, $444);
    $448 <- @add(0: $442, $445);
    
    // Full Round 1 of seventh hash
    // S-box layer (x^5 in Fp)
    $449 <- @mul(0: $446, $446);  // x^2
    $450 <- @mul(0: $449, $449);  // x^4
    $451 <- @mul(0: $450, $446);  // x^5 for first element
    
    $452 <- @mul(0: $447, $447);  // x^2
    $453 <- @mul(0: $452, $452);  // x^4
    $454 <- @mul(0: $453, $447);  // x^5 for second element
    
    $455 <- @mul(0: $448, $448);  // x^2
    $456 <- @mul(0: $455, $455);  // x^4
    $457 <- @mul(0: $456, $448);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $458 <- @mul(0: $451, $24);  // 2*s0
    $459 <- @mul(0: $454, $25);  // 3*s1
    $460 <- @add(0: $458, $459);         // 2*s0 + 3*s1
    $461 <- @add(0: $460, $457);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $462 <- @mul(0: $454, $24);  // 2*s1
    $463 <- @mul(0: $457, $25);  // 3*s2
    $464 <- @add(0: $451, $462);         // s0 + 2*s1
    $465 <- @add(0: $464, $463);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $466 <- @mul(0: $451, $25);  // 3*s0
    $467 <- @mul(0: $457, $24);  // 2*s2
    $468 <- @add(0: $466, $454);         // 3*s0 + s1
    $469 <- @add(0: $468, $467);         // 3*s0 + s1 + 2*s2

    // Simulated output of the seventh hash (normally would be many more operations)
    $470 <- @mul(0: $461, $461);  // x^2
    $471 <- @mul(0: $470, $470);  // x^4
    $472 <- @mul(0: $471, $461);  // x^5

    $473 <- @mul(0: $465, $465);  // x^2
    $474 <- @mul(0: $473, $473);  // x^4
    $475 <- @mul(0: $474, $465);  // x^5

    $476 <- @mul(0: $469, $469);  // x^2
    $477 <- @mul(0: $476, $476);  // x^4
    $478 <- @mul(0: $477, $469);  // x^5

    // Seventh hash output (all three state elements)
    $479 <- @add(0: $472, $3);  // First element - Add zero to copy
    $480 <- @add(0: $475, $3);  // Second element - Add zero to copy
    $481 <- @add(0: $478, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 8 ****
    // Use output from seventh hash as input to eighth hash
    $482 <- @private(0);  // Zero for chaining
    $483 <- @add(0: $479, $482);  // First element from seventh hash
    $484 <- @add(0: $480, $482);  // Second element from seventh hash
    $485 <- @add(0: $481, $482);  // Third element from seventh hash

    // Round constants for the eighth hash
    $486 <- @private(0);  // Round constant 0
    $487 <- @private(0);  // Round constant 1
    $488 <- @private(0);  // Round constant 2
    
    // Add round constants
    $489 <- @add(0: $483, $486);
    $490 <- @add(0: $484, $487);
    $491 <- @add(0: $485, $488);
    
    // Full Round 1 of eighth hash
    // S-box layer (x^5 in Fp)
    $492 <- @mul(0: $489, $489);  // x^2
    $493 <- @mul(0: $492, $492);  // x^4
    $494 <- @mul(0: $493, $489);  // x^5 for first element
    
    $495 <- @mul(0: $490, $490);  // x^2
    $496 <- @mul(0: $495, $495);  // x^4
    $497 <- @mul(0: $496, $490);  // x^5 for second element
    
    $498 <- @mul(0: $491, $491);  // x^2
    $499 <- @mul(0: $498, $498);  // x^4
    $500 <- @mul(0: $499, $491);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $501 <- @mul(0: $494, $24);  // 2*s0
    $502 <- @mul(0: $497, $25);  // 3*s1
    $503 <- @add(0: $501, $502);         // 2*s0 + 3*s1
    $504 <- @add(0: $503, $500);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $505 <- @mul(0: $497, $24);  // 2*s1
    $506 <- @mul(0: $500, $25);  // 3*s2
    $507 <- @add(0: $494, $505);         // s0 + 2*s1
    $508 <- @add(0: $507, $506);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $509 <- @mul(0: $494, $25);  // 3*s0
    $510 <- @mul(0: $500, $24);  // 2*s2
    $511 <- @add(0: $509, $497);         // 3*s0 + s1
    $512 <- @add(0: $511, $510);         // 3*s0 + s1 + 2*s2

    // Simulated output of the eighth hash (normally would be many more operations)
    $513 <- @mul(0: $504, $504);  // x^2
    $514 <- @mul(0: $513, $513);  // x^4
    $515 <- @mul(0: $514, $504);  // x^5

    $516 <- @mul(0: $508, $508);  // x^2
    $517 <- @mul(0: $516, $516);  // x^4
    $518 <- @mul(0: $517, $508);  // x^5

    $519 <- @mul(0: $512, $512);  // x^2
    $520 <- @mul(0: $519, $519);  // x^4
    $521 <- @mul(0: $520, $512);  // x^5

    // Eighth hash output (all three state elements)
    $522 <- @add(0: $515, $3);  // First element - Add zero to copy
    $523 <- @add(0: $518, $3);  // Second element - Add zero to copy
    $524 <- @add(0: $521, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 9 ****
    // Use output from eighth hash as input to ninth hash
    $525 <- @private(0);  // Zero for chaining
    $526 <- @add(0: $522, $525);  // First element from eighth hash
    $527 <- @add(0: $523, $525);  // Second element from eighth hash
    $528 <- @add(0: $524, $525);  // Third element from eighth hash

    // Round constants for the ninth hash
    $529 <- @private(0);  // Round constant 0
    $530 <- @private(0);  // Round constant 1
    $531 <- @private(0);  // Round constant 2
    
    // Add round constants
    $532 <- @add(0: $526, $529);
    $533 <- @add(0: $527, $530);
    $534 <- @add(0: $528, $531);
    
    // Full Round 1 of ninth hash
    // S-box layer (x^5 in Fp)
    $535 <- @mul(0: $532, $532);  // x^2
    $536 <- @mul(0: $535, $535);  // x^4
    $537 <- @mul(0: $536, $532);  // x^5 for first element
    
    $538 <- @mul(0: $533, $533);  // x^2
    $539 <- @mul(0: $538, $538);  // x^4
    $540 <- @mul(0: $539, $533);  // x^5 for second element
    
    $541 <- @mul(0: $534, $534);  // x^2
    $542 <- @mul(0: $541, $541);  // x^4
    $543 <- @mul(0: $542, $534);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $544 <- @mul(0: $537, $24);  // 2*s0
    $545 <- @mul(0: $540, $25);  // 3*s1
    $546 <- @add(0: $544, $545);         // 2*s0 + 3*s1
    $547 <- @add(0: $546, $543);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $548 <- @mul(0: $540, $24);  // 2*s1
    $549 <- @mul(0: $543, $25);  // 3*s2
    $550 <- @add(0: $537, $548);         // s0 + 2*s1
    $551 <- @add(0: $550, $549);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $552 <- @mul(0: $537, $25);  // 3*s0
    $553 <- @mul(0: $543, $24);  // 2*s2
    $554 <- @add(0: $552, $540);         // 3*s0 + s1
    $555 <- @add(0: $554, $553);         // 3*s0 + s1 + 2*s2

    // Simulated output of the ninth hash (normally would be many more operations)
    $556 <- @mul(0: $547, $547);  // x^2
    $557 <- @mul(0: $556, $556);  // x^4
    $558 <- @mul(0: $557, $547);  // x^5

    $559 <- @mul(0: $551, $551);  // x^2
    $560 <- @mul(0: $559, $559);  // x^4
    $561 <- @mul(0: $560, $551);  // x^5

    $562 <- @mul(0: $555, $555);  // x^2
    $563 <- @mul(0: $562, $562);  // x^4
    $564 <- @mul(0: $563, $555);  // x^5

    // Ninth hash output (all three state elements)
    $565 <- @add(0: $558, $3);  // First element - Add zero to copy
    $566 <- @add(0: $561, $3);  // Second element - Add zero to copy
    $567 <- @add(0: $564, $3);  // Third element - Add zero to copy

    // **** HASH ITERATION 10 ****
    // Use output from ninth hash as input to tenth hash
    $568 <- @private(0);  // Zero for chaining
    $569 <- @add(0: $565, $568);  // First element from ninth hash
    $570 <- @add(0: $566, $568);  // Second element from ninth hash
    $571 <- @add(0: $567, $568);  // Third element from ninth hash

    // Round constants for the tenth hash
    $572 <- @private(0);  // Round constant 0
    $573 <- @private(0);  // Round constant 1
    $574 <- @private(0);  // Round constant 2
    
    // Add round constants
    $575 <- @add(0: $569, $572);
    $576 <- @add(0: $570, $573);
    $577 <- @add(0: $571, $574);
    
    // Full Round 1 of tenth hash
    // S-box layer (x^5 in Fp)
    $578 <- @mul(0: $575, $575);  // x^2
    $579 <- @mul(0: $578, $578);  // x^4
    $580 <- @mul(0: $579, $575);  // x^5 for first element
    
    $581 <- @mul(0: $576, $576);  // x^2
    $582 <- @mul(0: $581, $581);  // x^4
    $583 <- @mul(0: $582, $576);  // x^5 for second element
    
    $584 <- @mul(0: $577, $577);  // x^2
    $585 <- @mul(0: $584, $584);  // x^4
    $586 <- @mul(0: $585, $577);  // x^5 for third element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $587 <- @mul(0: $580, $24);  // 2*s0
    $588 <- @mul(0: $583, $25);  // 3*s1
    $589 <- @add(0: $587, $588);         // 2*s0 + 3*s1
    $590 <- @add(0: $589, $586);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $591 <- @mul(0: $583, $24);  // 2*s1
    $592 <- @mul(0: $586, $25);  // 3*s2
    $593 <- @add(0: $580, $591);         // s0 + 2*s1
    $594 <- @add(0: $593, $592);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $595 <- @mul(0: $580, $25);  // 3*s0
    $596 <- @mul(0: $586, $24);  // 2*s2
    $597 <- @add(0: $595, $583);         // 3*s0 + s1
    $598 <- @add(0: $597, $596);         // 3*s0 + s1 + 2*s2

    // Continue with more rounds of tenth hash...
    // For brevity, we'll skip to the output of the tenth hash

    // Simulated output of the tenth hash (normally would be many more operations)
    $599 <- @mul(0: $590, $590);  // x^2
    $600 <- @mul(0: $599, $599);  // x^4
    $601 <- @mul(0: $600, $590);  // x^5

    $602 <- @mul(0: $594, $594);  // x^2
    $603 <- @mul(0: $602, $602);  // x^4
    $604 <- @mul(0: $603, $594);  // x^5

    $605 <- @mul(0: $598, $598);  // x^2
    $606 <- @mul(0: $605, $605);  // x^4
    $607 <- @mul(0: $606, $598);  // x^5

    // Final hash chain output (10th hash)
    $608 <- @add(0: $601, $3);  // First element (final result)
@end
