version 2.0.0;
circuit;
@type field 18446744073709551616;
@begin
    // Private inputs: 3 input elements
    $0 <- @private(0);
    $1 <- @private(0);
    $2 <- @private(0);

    // Initialize state with input elements using @add with zero
    // State size: 3 elements (t=3)
    $3 <- @private(0);  // Zero value
    $6 <- @add(0: $0, $3);  // Add zero to copy input
    $7 <- @add(0: $1, $3);  // Add zero to copy input
    $8 <- @add(0: $2, $3);  // Add zero to copy input

    // Round constants for the first round
    $9 <- @private(0);  // Round constant 0
    $10 <- @private(0);  // Round constant 1
    $11 <- @private(0);  // Round constant 2

    // Add round constants (ARK - Add Round Key)
    $12 <- @add(0: $6, $9);
    $13 <- @add(0: $7, $10);
    $14 <- @add(0: $8, $11);

    // ===== FULL ROUNDS (first set) =====
    // Typically Poseidon uses 4 full rounds at the beginning

    // Full Round 1
    // S-box layer (x^5 in Fp)
    $15 <- @mul(0: $12, $12);     // x^2
    $16 <- @mul(0: $15, $15);   // x^4
    $17 <- @mul(0: $16, $12);    // x^5 for first state element
    
    $18 <- @mul(0: $13, $13);   // x^2
    $19 <- @mul(0: $18, $18);   // x^4
    $20 <- @mul(0: $19, $13);   // x^5 for second state element
    
    $21 <- @mul(0: $14, $14);   // x^2
    $22 <- @mul(0: $21, $21);   // x^4
    $23 <- @mul(0: $22, $14);   // x^5 for third state element

    // MDS matrix multiplication (linear layer)
    // Using a simple MDS matrix for demonstration
    // [ 2 3 1 ]
    // [ 1 2 3 ]
    // [ 3 1 2 ]
    
    // Coefficients for MDS matrix
    $24 <- @private(0);  // Coefficient 2
    $25 <- @private(0);  // Coefficient 3
    
    // First row: 2*s0 + 3*s1 + 1*s2
    $26 <- @mul(0: $17, $24);  // 2*s0
    $27 <- @mul(0: $20, $25);  // 3*s1
    $28 <- @add(0: $26, $27);          // 2*s0 + 3*s1
    $29 <- @add(0: $28, $23);          // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $30 <- @mul(0: $20, $24);  // 2*s1
    $31 <- @mul(0: $23, $25);  // 3*s2
    $32 <- @add(0: $17, $30);          // s0 + 2*s1
    $33 <- @add(0: $32, $31);          // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $34 <- @mul(0: $17, $25);  // 3*s0
    $35 <- @mul(0: $23, $24);  // 2*s2
    $36 <- @add(0: $34, $20);          // 3*s0 + s1
    $37 <- @add(0: $36, $35);          // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $38 <- @private(0);  // Round constant 3
    $39 <- @private(0);  // Round constant 4
    $40 <- @private(0);  // Round constant 5

    // Add round constants
    $41 <- @add(0: $29, $38);
    $42 <- @add(0: $33, $39);
    $43 <- @add(0: $37, $40);

    // Full Round 2
    // S-box layer (x^5 in Fp)
    $44 <- @mul(0: $41, $41);    // x^2
    $45 <- @mul(0: $44, $44);    // x^4
    $46 <- @mul(0: $45, $41);    // x^5 for first state element
    
    $47 <- @mul(0: $42, $42);    // x^2
    $48 <- @mul(0: $47, $47);    // x^4
    $49 <- @mul(0: $48, $42);    // x^5 for second state element
    
    $50 <- @mul(0: $43, $43);    // x^2
    $51 <- @mul(0: $50, $50);    // x^4
    $52 <- @mul(0: $51, $43);    // x^5 for third state element

    // MDS matrix multiplication (same as before)
    // First row: 2*s0 + 3*s1 + 1*s2
    $53 <- @mul(0: $46, $24);  // 2*s0
    $54 <- @mul(0: $49, $25);  // 3*s1
    $55 <- @add(0: $53, $54);          // 2*s0 + 3*s1
    $56 <- @add(0: $55, $52);          // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $57 <- @mul(0: $49, $24);  // 2*s1
    $58 <- @mul(0: $52, $25);  // 3*s2
    $59 <- @add(0: $46, $57);          // s0 + 2*s1
    $60 <- @add(0: $59, $58);          // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $61 <- @mul(0: $46, $25);  // 3*s0
    $62 <- @mul(0: $52, $24);  // 2*s2
    $63 <- @add(0: $61, $49);          // 3*s0 + s1
    $64 <- @add(0: $63, $62);          // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $65 <- @private(0);  // Round constant 6
    $66 <- @private(0);  // Round constant 7
    $67 <- @private(0);  // Round constant 8

    // Add round constants
    $68 <- @add(0: $56, $65);
    $69 <- @add(0: $60, $66);
    $70 <- @add(0: $64, $67);

    // Full Round 3
    // S-box layer (x^5 in Fp)
    $71 <- @mul(0: $68, $68);    // x^2
    $72 <- @mul(0: $71, $71);    // x^4
    $73 <- @mul(0: $72, $68);    // x^5 for first state element
    
    $74 <- @mul(0: $69, $69);    // x^2
    $75 <- @mul(0: $74, $74);    // x^4
    $76 <- @mul(0: $75, $69);    // x^5 for second state element
    
    $77 <- @mul(0: $70, $70);    // x^2
    $78 <- @mul(0: $77, $77);    // x^4
    $79 <- @mul(0: $78, $70);    // x^5 for third state element

    // MDS matrix multiplication (same as before)
    // First row: 2*s0 + 3*s1 + 1*s2
    $80 <- @mul(0: $73, $24);  // 2*s0
    $81 <- @mul(0: $76, $25);  // 3*s1
    $82 <- @add(0: $80, $81);          // 2*s0 + 3*s1
    $83 <- @add(0: $82, $79);          // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $84 <- @mul(0: $76, $24);  // 2*s1
    $85 <- @mul(0: $79, $25);  // 3*s2
    $86 <- @add(0: $73, $84);          // s0 + 2*s1
    $87 <- @add(0: $86, $85);          // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $88 <- @mul(0: $73, $25);  // 3*s0
    $89 <- @mul(0: $79, $24);  // 2*s2
    $90 <- @add(0: $88, $76);          // 3*s0 + s1
    $91 <- @add(0: $90, $89);          // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $92 <- @private(0);  // Round constant 9
    $93 <- @private(0);  // Round constant 10
    $94 <- @private(0);  // Round constant 11

    // Add round constants
    $95 <- @add(0: $83, $92);
    $96 <- @add(0: $87, $93);
    $97 <- @add(0: $91, $94);

    // Full Round 4
    // S-box layer (x^5 in Fp)
    $98 <- @mul(0: $95, $95);    // x^2
    $99 <- @mul(0: $98, $98);    // x^4
    $100 <- @mul(0: $99, $95);    // x^5 for first state element
    
    $101 <- @mul(0: $96, $96);    // x^2
    $102 <- @mul(0: $101, $101);    // x^4
    $103 <- @mul(0: $102, $96);    // x^5 for second state element
    
    $104 <- @mul(0: $97, $97);    // x^2
    $105 <- @mul(0: $104, $104);   // x^4
    $106 <- @mul(0: $105, $97);  // x^5 for third state element

    // MDS matrix multiplication (same as before)
    // First row: 2*s0 + 3*s1 + 1*s2
    $107 <- @mul(0: $100, $24);   // 2*s0
    $108 <- @mul(0: $103, $25);   // 3*s1
    $109 <- @add(0: $107, $108);         // 2*s0 + 3*s1
    $110 <- @add(0: $109, $106);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $111 <- @mul(0: $103, $24);   // 2*s1
    $112 <- @mul(0: $106, $25);  // 3*s2
    $113 <- @add(0: $100, $111);          // s0 + 2*s1
    $114 <- @add(0: $113, $112);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $115 <- @mul(0: $100, $25);   // 3*s0
    $116 <- @mul(0: $106, $24);  // 2*s2
    $117 <- @add(0: $115, $103);          // 3*s0 + s1
    $118 <- @add(0: $117, $116);         // 3*s0 + s1 + 2*s2

    // Round constants for the partial rounds
    $119 <- @private(0);  // Round constant 12
    $120 <- @private(0);  // Round constant 13
    $121 <- @private(0);  // Round constant 14

    // Add round constants
    $122 <- @add(0: $110, $119);
    $123 <- @add(0: $114, $120);
    $124 <- @add(0: $118, $121);

    // ===== PARTIAL ROUNDS =====
    // Typically Poseidon uses around 30 partial rounds for t=3
    // We'll implement a few for demonstration

    // Partial Round 1
    // S-box layer (x^5) applied only to the first element
    $125 <- @mul(0: $122, $122);   // x^2
    $126 <- @mul(0: $125, $125);   // x^4
    $127 <- @mul(0: $126, $122);   // x^5 for first state element only
    
    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $128 <- @mul(0: $127, $24);  // 2*s0
    $129 <- @mul(0: $123, $25);  // 3*s1
    $130 <- @add(0: $128, $129);         // 2*s0 + 3*s1
    $131 <- @add(0: $130, $124);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $132 <- @mul(0: $123, $24);  // 2*s1
    $133 <- @mul(0: $124, $25);  // 3*s2
    $134 <- @add(0: $127, $132);         // s0 + 2*s1
    $135 <- @add(0: $134, $133);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $136 <- @mul(0: $127, $25);  // 3*s0
    $137 <- @mul(0: $124, $24);  // 2*s2
    $138 <- @add(0: $136, $123);         // 3*s0 + s1
    $139 <- @add(0: $138, $137);         // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $140 <- @private(0);  // Round constant 15
    $141 <- @private(0);  // Round constant 16
    $142 <- @private(0);  // Round constant 17

    // Add round constants
    $143 <- @add(0: $131, $140);
    $144 <- @add(0: $135, $141);
    $145 <- @add(0: $139, $142);

    // Partial Round 2
    // S-box layer (x^5) applied only to the first element
    $146 <- @mul(0: $143, $143);   // x^2
    $147 <- @mul(0: $146, $146);   // x^4
    $148 <- @mul(0: $147, $143);   // x^5 for first state element only
    
    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $149 <- @mul(0: $148, $24);  // 2*s0
    $150 <- @mul(0: $144, $25);  // 3*s1
    $151 <- @add(0: $149, $150);         // 2*s0 + 3*s1
    $152 <- @add(0: $151, $145);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $153 <- @mul(0: $144, $24);  // 2*s1
    $154 <- @mul(0: $145, $25);  // 3*s2
    $155 <- @add(0: $148, $153);         // s0 + 2*s1
    $156 <- @add(0: $155, $154);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $157 <- @mul(0: $148, $25);  // 3*s0
    $158 <- @mul(0: $145, $24);  // 2*s2
    $159 <- @add(0: $157, $144);         // 3*s0 + s1
    $160 <- @add(0: $159, $158);         // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $161 <- @private(0);  // Round constant 18
    $162 <- @private(0);  // Round constant 19
    $163 <- @private(0);  // Round constant 20

    // Add round constants
    $164 <- @add(0: $152, $161);
    $165 <- @add(0: $156, $162);
    $166 <- @add(0: $160, $163);

    // ===== FULL ROUNDS (final set) =====
    // Typically Poseidon uses 4 full rounds at the end

    // Full Round 1 (of final set)
    // S-box layer (x^5 in Fp)
    $167 <- @mul(0: $164, $164);   // x^2
    $168 <- @mul(0: $167, $167);   // x^4
    $169 <- @mul(0: $168, $164);   // x^5 for first state element
    
    $170 <- @mul(0: $165, $165);   // x^2
    $171 <- @mul(0: $170, $170);   // x^4
    $172 <- @mul(0: $171, $165);   // x^5 for second state element
    
    $173 <- @mul(0: $166, $166);   // x^2
    $174 <- @mul(0: $173, $173);   // x^4
    $175 <- @mul(0: $174, $166);   // x^5 for third state element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $176 <- @mul(0: $169, $24);  // 2*s0
    $177 <- @mul(0: $172, $25);  // 3*s1
    $178 <- @add(0: $176, $177);         // 2*s0 + 3*s1
    $179 <- @add(0: $178, $175);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $180 <- @mul(0: $172, $24);  // 2*s1
    $181 <- @mul(0: $175, $25);  // 3*s2
    $182 <- @add(0: $169, $180);         // s0 + 2*s1
    $183 <- @add(0: $182, $181);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $184 <- @mul(0: $169, $25);  // 3*s0
    $185 <- @mul(0: $175, $24);  // 2*s2
    $186 <- @add(0: $184, $172);         // 3*s0 + s1
    $187 <- @add(0: $186, $185);         // 3*s0 + s1 + 2*s2

    // Round constants for the next round
    $188 <- @private(0);  // Round constant 21
    $189 <- @private(0);  // Round constant 22
    $190 <- @private(0);  // Round constant 23

    // Add round constants
    $191 <- @add(0: $179, $188);
    $192 <- @add(0: $183, $189);
    $193 <- @add(0: $187, $190);

    // Full Round 2 (of final set)
    // S-box layer (x^5 in Fp)
    $194 <- @mul(0: $191, $191);   // x^2
    $195 <- @mul(0: $194, $194);   // x^4
    $196 <- @mul(0: $195, $191);   // x^5 for first state element
    
    $197 <- @mul(0: $192, $192);   // x^2
    $198 <- @mul(0: $197, $197);   // x^4
    $199 <- @mul(0: $198, $192);   // x^5 for second state element
    
    $200 <- @mul(0: $193, $193);   // x^2
    $201 <- @mul(0: $200, $200);   // x^4
    $202 <- @mul(0: $201, $193);   // x^5 for third state element

    // MDS matrix multiplication
    // First row: 2*s0 + 3*s1 + 1*s2
    $203 <- @mul(0: $196, $24);  // 2*s0
    $204 <- @mul(0: $199, $25);  // 3*s1
    $205 <- @add(0: $203, $204);         // 2*s0 + 3*s1
    $206 <- @add(0: $205, $202);         // 2*s0 + 3*s1 + s2
    
    // Second row: 1*s0 + 2*s1 + 3*s2
    $207 <- @mul(0: $199, $24);  // 2*s1
    $208 <- @mul(0: $202, $25);  // 3*s2
    $209 <- @add(0: $196, $207);         // s0 + 2*s1
    $210 <- @add(0: $209, $208);         // s0 + 2*s1 + 3*s2
    
    // Third row: 3*s0 + 1*s1 + 2*s2
    $211 <- @mul(0: $196, $25);  // 3*s0
    $212 <- @mul(0: $202, $24);  // 2*s2
    $213 <- @add(0: $211, $199);         // 3*s0 + s1
    $214 <- @add(0: $213, $212);         // 3*s0 + s1 + 2*s2

    // Output the first element of the state as the hash result
    // Replace direct copy with add zero
    $215 <- @add(0: $206, $3);  // Add zero to copy the output
@end
