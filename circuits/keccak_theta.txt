version 2.0.0;
subcircuit "keccak_theta";
@type field 2;
@begin
  // input: 25 lane state $0 .. $24 (each lane is 64-bit word)
  // auxiliary wires:
  //   $25..$29: column parity C[0]..C[4]
  //   $30..$34: difference D[0]..D[4]
  
  // --- Column parity calculation ---
  // column x=0: C0 = A(0,0) XOR A(0,1) XOR A(0,2) XOR A(极,3) XOR A(0,4)
  $25 <- @copy($0);
  $25 <- @add(0: $25, $5);
  $25 <- @add(0: $25, $10);
  $25 <- @add(0: $25, $15);
  $25 <- @add(0: $25, $20);
  
  // column x=1: C1 = A(1,0) XOR A(1,1) XOR A(1,2) XOR A(1,3) XOR A(1,4)
  $26 <- @copy($1);
  $26 <- @add(0: $26, $6);
  $26 <- @add(0: $26, $11);
  $26 <- @add(0: $26, $16);
  $26 <- @add(0: $26, $21);
  
  // column x=2: C2 = A(2,0) XOR A(2,1) XOR A(2,2) XOR A(2,3) XOR A(2,4)
  $27 <- @copy($2);
  $27 <- @add(0: $27, $7);
  $27 <- @add(0: $27, $12);
  $27 <- @add(0: $27, $17);
  $27 <- @add(0: $27, $22);
  
  // column x=3: C3 = A(3,0) XOR A(3,1) XOR A(3,2) XOR A(3,3) XOR A(3,4)
  $28 <- @copy($3);
  $28 <- @add(0: $28, $8);
  $28 <- @add(0: $28, $13);
  $28 <- @add(0: $28, $18);
  $28 <- @add(0: $28, $23);
  
  // column x=4: C4 = A(4,0) XOR A(4,1) XOR A(4,2) XOR A(4,3) XOR A(4,4)
  $29 <- @copy($4);
  $29 <- @add(0: $29, $9);
  $29 <- @add(0: $29, $14);
  $29 <- @add(0: $29, $19);
  $29 <- @add(0: $29, $24);
  
  // --- D[x] calculation ---
  // D[x] = C[x-1] XOR ROT(C[x+1], 1) (indices modulo 5)
  // Example: D0 = C4 XOR ROT(C1, 1)
  $30 <- @call("rot1", $26);  // ROT(C1,1)
  $30 <- @add(0: $30, $29);    // D0 = C4 XOR (rotated C1)
  
  // D1 = C0 XOR ROT(C2, 1)
  $31 <- @call("rot1", $27);
  $31 <- @add(0: $31, $25);
  
  // D2 = C1 XOR ROT(C3, 1)
  $32 <- @call("rot1", $28);
  $32 <- @add(0: $32, $26);
  
  // D3 = C2 XOR ROT(C4, 1)
  $33 <- @call("rot1", $29);
  $33 <- @add(0: $33, $27);
  
  // D4 = C3 XOR ROT(C0, 1)
  $34 <- @call("rot1", $25);
  $34 <- @add(0: $34, $28);
  
  // --- State update ---
  // Update each lane A(x,y): A(x,y) <- A(x,y) XOR D[x]
  // (A(0,0)～A(4,0))
  $0  <- @add(0: $0,  $30);
  $1  <- @add(0: $1,  $31);
  $2  <- @add(0: $2,  $32);
  $3  <- @add(0: $3,  $33);
  $4  <- @add(0: $4,  $34);
  // (A(0,1)～A(4,1))
  $5  <- @add(0: $5,  $30);
  $6  <- @add(0: $6,  $31);
  $7  <- @add(0: $7,  $32);
  $8  <- @add(0: $8,  $33);
  $9  <- @add(0: $9,  $34);
  // (A(0,2)～A(4,2))
  $10 <- @add(0: $10, $30);
  $11 <- @add(0: $11, $31);
  $12 <- @add(0: $12, $32);
  $13 <- @add(0: $13, $33);
  $14 <- @add(0: $14, $34);
  // (A(0,3)～A(4,3))
  $15 <- @add(0: $15, $30);
  $16 <- @add(0: $16, $31);
  $17 <- @add(0: $17, $32);
  $18 <- @add(0: $18, $33);
  $19 <- @add(0: $19, $34);
  // (A(0,4)～A(4,4))
  $20 <- @add(0: $20, $30);
  $21 <- @add(0: $21, $31);
  $22 <- @add(0: $22, $32);
  $23 <- @add(0: $23, $33);
  $24 <- @add(0: $24, $34);
  
  // output: updated state is stored in $0 .. $24
@end
